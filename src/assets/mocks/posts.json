{
    "posts": [
      {
        "id": 1,
        "title": {
          "pt-BR": "O 'S' de Single Responsibility Principle (SRP)",
          "en-US": "The 'S' in Single Responsibility Principle (SRP)"
        },
        "content": {
          "pt-BR": "Você já se deparou com um código que parecia fazer de tudo um pouco e era difícil de manter? Isso acontece porque ele provavelmente não seguia o princípio de responsabilidade única, o SRP.",
          "en-US": "Have you ever encountered code that seemed to do a bit of everything and was hard to maintain? This happens because it probably didn't follow the Single Responsibility Principle, SRP."
        },
        "date": "2023-10-01",
        "image": "../assets/jababack.jpg"
      },
      {
        "id": 2,
        "title": {
          "pt-BR": "Post 2",
          "en": "Post 2"
        },
        "content": {
          "pt-BR": "Conteúdo do post 2...",
          "en-US": "Content of post 2..."
        },
        "date": "2023-10-05",
        "image": "../assets/jababack.jpg"
      },
      {
        "id": 3,
        "title": {
          "pt-BR": "O 'S' de Single Responsibility Principle (SRP)",
          "en-US": "The 'S' in Single Responsibility Principle (SRP)"
        },
        "content": {
          "pt-BR": "Você já se deparou com um código que parecia fazer de tudo um pouco e era difícil de manter? Isso acontece porque ele provavelmente não seguia o princípio de responsabilidade única, o SRP. 🔍 O que é o SRP? O SRP diz que uma classe deve ter uma, e somente uma, razão para mudar. Ou seja, ela deve ter apenas uma responsabilidade ou propósito bem definido. Isso torna o código mais manutenível, testável e fácil de entender. 💡 Por que o SRP é importante? Facilita a Manutenção: Classes com responsabilidades únicas são mais fáceis de modificar sem impactar outras partes do sistema. Aumenta a Reusabilidade: Quando as classes são focadas, elas podem ser reutilizadas em diferentes contextos. Melhora a Testabilidade: Testar classes pequenas e focadas é mais simples e eficaz. 🔧 Como aplicar o SRP no seu código? Identifique responsabilidades: Analise suas classes e determine quais responsabilidades elas estão assumindo. Separe as responsabilidades: Divida as classes que possuem múltiplas responsabilidades em várias classes menores, cada uma com um propósito claro. Mantenha o foco: Certifique-se de que cada classe tenha um único motivo para mudar, ou seja, uma única responsabilidade.",
          "en-US": "Have you ever encountered code that seemed to do a bit of everything and was hard to maintain? This happens because it probably didn't follow the Single Responsibility Principle, SRP. 🔍 What is SRP? SRP states that a class should have one, and only one, reason to change. That is, it should have only one well-defined responsibility or purpose. This makes the code more maintainable, testable, and easier to understand. 💡 Why is SRP important? Facilitates Maintenance: Classes with single responsibilities are easier to modify without impacting other parts of the system. Increases Reusability: When classes are focused, they can be reused in different contexts. Improves Testability: Testing small, focused classes is simpler and more effective. 🔧 How to apply SRP in your code? Identify responsibilities: Analyze your classes and determine what responsibilities they are taking on. Separate responsibilities: Divide classes with multiple responsibilities into several smaller classes, each with a clear purpose. Stay focused: Make sure each class has only one reason to change, that is, a single responsibility."
        },
        "date": "2023-10-10",
        "image": "../assets/jababack.jpg"
      }
    ]
  }